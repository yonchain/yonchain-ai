<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yonchain.ai.sys.mapper.TenantMapper">
    <!-- 基础结果映射 -->
    <resultMap id="BaseResultMap" type="com.yonchain.ai.sys.entity.TenantEntity">
        <!-- 主键ID，使用UUID类型 -->
        <id column="id" property="id" jdbcType="OTHER" />
        <!-- 租户名称 -->
        <result column="name" property="name" jdbcType="VARCHAR" />
        <!-- 加密公钥，用于数据加密 -->
        <result column="encrypt_public_key" property="encryptPublicKey" jdbcType="VARCHAR" />
        <!-- 计划类型，默认为basic -->
        <result column="plan" property="plan" jdbcType="VARCHAR" />
        <!-- 租户状态，默认为normal -->
        <result column="status" property="status" jdbcType="VARCHAR" />
        <!-- 创建时间 -->
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
        <!-- 更新时间 -->
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
        <!-- 自定义配置，存储JSON格式的配置信息 -->
        <result column="custom_config" property="customConfig" jdbcType="VARCHAR" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, name, encrypt_public_key, plan, status, created_at, updated_at, custom_config
    </sql>

    <!-- 根据ID查询租户 -->
    <select id="selectById" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM sys_tenant
        WHERE id = #{id}::uuid
    </select>

    <!-- 根据ID查询租户详情 -->
    <select id="selectDetailById" resultType="com.yonchain.ai.sys.entity.TenantEntity">
        SELECT
            tenant.*,user_tenant.role
        FROM
            sys_tenant tenant,sys_user_tenant user_tenant
        <where>
            user_tenant.tenant_id = tenant.id AND
            tenant.id = #{id}::uuid AND
            user_tenant.current = true
        </where>
    </select>

    <!-- 查询租户列表 -->
    <select id="selectList" resultMap="BaseResultMap">
        SELECT
            tenant.*
        FROM
            sys_tenant tenant,sys_user_tenant user_tenant
        <where>
            user_tenant.tenant_id = tenant.id AND
            user_tenant.account_id = #{userId}::uuid
            <if test="params.name != null and params.name != ''">
                AND name LIKE CONCAT('%', #{params.name}, '%')
            </if>
        </where>
        ORDER BY created_at DESC
    </select>

    <!-- 根据用户id查询租户列表 -->
    <select id="selectListByUserId" resultMap="BaseResultMap">
        SELECT
            tenant.*
        FROM
            sys_tenant tenant,sys_user_tenant user_tenant
        <where>
            user_tenant.tenant_id = tenant.id AND
            user_tenant.account_id = #{userId}::uuid
        </where>
        ORDER BY created_at DESC
    </select>

    <!-- 根据用户id获取当前租户 -->
    <select id="selectCurrentTenantByUserId" resultType="com.yonchain.ai.sys.entity.TenantEntity">
        SELECT
            tenant.*,user_tenant.role
        FROM
            sys_tenant tenant,sys_user_tenant user_tenant
            <where>
                user_tenant.tenant_id = tenant.id AND
                user_tenant.account_id = #{userId}::uuid AND
                user_tenant.current = true
            </where>
            LIMIT 1
    </select>

    <!-- 插入租户记录 -->
    <insert id="insert" parameterType="com.yonchain.ai.sys.entity.TenantEntity">
        INSERT INTO sys_tenant (
            id,name, encrypt_public_key, plan, status, custom_config,created_at, updated_at
        )
        VALUES (
            #{id}::uuid, #{name}, #{encryptPublicKey}, #{plan}, #{status}, #{customConfig}, #{createdAt}, #{updatedAt}
        )
    </insert>

    <!-- 根据ID更新租户信息 -->
    <update id="updateById" parameterType="com.yonchain.ai.sys.entity.TenantEntity">
        UPDATE sys_tenant
        SET name = #{name},
            encrypt_public_key = #{encryptPublicKey},
            plan = #{plan},
            status = #{status},
            updated_at = CURRENT_TIMESTAMP,
            custom_config = #{customConfig}
        WHERE id = #{id}::uuid
    </update>

    <!-- 根据ID删除租户 -->
    <delete id="deleteById">
        DELETE FROM sys_tenant
        WHERE id = #{id}::uuid
    </delete>

    <!-- 根据ID批量删除租户 -->
    <delete id="deleteByIds">
        DELETE FROM sys_tenant
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}::uuid
        </foreach>
    </delete>

</mapper>
