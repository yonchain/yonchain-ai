<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yonchain.ai.sys.mapper.UserMapper">

    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.yonchain.ai.sys.entity.UserEntity">
        <!-- 主键ID -->
        <id column="id" property="id"/>
        <!-- 用户名称 -->
        <result column="name" property="name"/>
        <!-- 用户邮箱，用于登录和通知 -->
        <result column="email" property="email"/>
        <!-- 加密后的密码 -->
        <result column="password" property="password"/>
        <!-- 密码加密盐值 -->
        <result column="password_salt" property="passwordSalt"/>
        <!-- 用户头像URL -->
        <result column="avatar" property="avatar"/>
        <!-- 界面语言设置，如en-US, zh-CN等 -->
        <result column="interface_language" property="interfaceLanguage"/>
        <!-- 界面主题设置，如light, dark等 -->
        <result column="interface_theme" property="interfaceTheme"/>
        <!-- 用户时区设置，如Asia/Shanghai, America/New_York等 -->
        <result column="timezone" property="timezone"/>
        <!-- 最后一次登录时间 -->
        <result column="last_login_at" property="lastLoginAt"/>
        <!-- 最后一次登录IP地址 -->
        <result column="last_login_ip" property="lastLoginIp"/>
        <!-- 用户状态：active-活跃, inactive-未激活, suspended-已暂停, deleted-已删除 -->
        <result column="status" property="status"/>
        <!-- 用户初始化完成时间 -->
        <result column="initialized_at" property="initializedAt"/>
        <!-- 用户创建时间 -->
        <result column="created_at" property="createdAt"/>
        <!-- 用户更新时间 -->
        <result column="updated_at" property="updatedAt"/>
        <!-- 用户最后活跃时间 -->
        <result column="last_active_at" property="lastActiveAt"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, name, email, password, password_salt, avatar, interface_language, interface_theme,
        timezone, last_login_at, last_login_ip, status, initialized_at, created_at, updated_at,
        last_active_at
    </sql>

    <!-- 通过ID查询用户 -->
    <select id="selectById" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE id = #{id}::uuid
    </select>

    <!-- 通过用户名查询用户 -->
    <select id="selectByUsername" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE name = #{userName}
    </select>

    <!-- 通过邮箱查询用户 -->
    <select id="selectByEmail" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE email = #{email}
    </select>

    <!-- 根据条件查询用户列表 -->
    <select id="selectList" resultMap="BaseResultMap">
        SELECT
            sys_user.*
        FROM
            sys_user,
            sys_user_tenant user_tenant
        <where>
            sys_user.id = user_tenant.account_id AND
            user_tenant.tenant_id = #{tenantId}::uuid
            <if test="params.name != null and params.name != ''">
                AND name LIKE CONCAT('%', #{params.name}, '%')
            </if>
            <if test="params.email != null and params.email != ''">
                AND email LIKE CONCAT('%', #{params.email}, '%')
            </if>

        </where>
        ORDER BY created_at DESC
    </select>

    <!-- 新增用户 -->
    <insert id="insert">
        INSERT INTO sys_user (
            id, name, email, password, password_salt, avatar, interface_language,
            interface_theme, timezone, last_login_at, last_login_ip, status,
            initialized_at, created_at, updated_at, last_active_at
        )
        VALUES (
                   #{id}::uuid, #{name}, #{email}, #{password}, #{passwordSalt}, #{avatar},
                   #{interfaceLanguage}, #{interfaceTheme}, #{timezone}, #{lastLoginAt},
                   #{lastLoginIp}, #{status}, #{initializedAt}, #{createdAt}, #{updatedAt},
                   #{lastActiveAt}
               )
    </insert>

    <!-- 修改用户 -->
    <update id="updateById">
        UPDATE sys_user
        <set>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="email != null">
                email = #{email},
            </if>
            <if test="password != null">
                password = #{password},
            </if>
            <if test="passwordSalt != null">
                password_salt = #{passwordSalt},
            </if>
            <if test="avatar != null">
                avatar = #{avatar},
            </if>
            <if test="interfaceLanguage != null">
                interface_language = #{interfaceLanguage},
            </if>
            <if test="interfaceTheme != null">
                interface_theme = #{interfaceTheme},
            </if>
            <if test="timezone != null">
                timezone = #{timezone},
            </if>
            <if test="lastLoginAt != null">
                last_login_at = #{lastLoginAt},
            </if>
            <if test="lastLoginIp != null">
                last_login_ip = #{lastLoginIp},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="initializedAt != null">
                initialized_at = #{initializedAt},
            </if>
            <if test="updatedAt != null">
                updated_at = #{updatedAt},
            </if>
            <if test="lastActiveAt != null">
                last_active_at = #{lastActiveAt}
            </if>
        </set>
        WHERE id = #{id}::uuid
    </update>

    <!-- 通过ID删除用户 -->
    <delete id="deleteById">
        DELETE FROM sys_user WHERE id = #{id}::uuid
    </delete>

    <!-- 批量删除用户 -->
    <delete id="deleteByIds">
        DELETE FROM sys_user WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}::uuid
        </foreach>
    </delete>

    <!-- 更新用户状态 -->
    <update id="updateStatus">
        UPDATE sys_user
        SET status = #{status},
            updated_at = NOW()
        WHERE id = #{id}::uuid
    </update>

    <!-- 更新最后登录信息 -->
    <update id="updateLastLogin">
        UPDATE sys_user
        SET last_login_at = NOW(),
            last_login_ip = #{loginIp},
            last_active_at = NOW(),
            updated_at = NOW()
        WHERE id = #{id}::uuid
    </update>

</mapper>
