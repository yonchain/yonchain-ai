<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yonchain.ai.tmpl.mapper.ModelProviderMapper">

    <!-- 基础结果映射 -->
    <resultMap id="BaseResultMap" type="com.yonchain.ai.tmpl.entity.ModelProviderEntity">
        <!-- 主键ID -->
        <id column="id" property="id" jdbcType="VARCHAR" />
        <!-- 租户ID -->
        <result column="tenant_id" property="tenantId" jdbcType="VARCHAR" />
        <!-- 提供商代码，关联静态配置文件 -->
        <result column="provider_code" property="providerCode" jdbcType="VARCHAR" />
        <!-- 插件ID -->
        <result column="plugin_id" property="pluginId" jdbcType="VARCHAR" />
       <!-- &lt;!&ndash; API密钥 &ndash;&gt;
        <result column="api_key" property="apiKey" jdbcType="VARCHAR" />
        &lt;!&ndash; API基础URL &ndash;&gt;
        <result column="base_url" property="baseUrl" jdbcType="VARCHAR" />
        &lt;!&ndash; API代理URL &ndash;&gt;
        <result column="proxy_url" property="proxyUrl" jdbcType="VARCHAR" />-->
        <!-- 自定义配置参数 -->
        <result column="custom_config" property="customConfig" jdbcType="VARCHAR" />
        <!-- 租户是否启用该提供商 -->
        <result column="enabled" property="enabled" jdbcType="BOOLEAN" />
        <!-- 提供商显示名称 -->
        <result column="name" property="name" jdbcType="VARCHAR" />
        <!-- 提供商描述 -->
        <result column="description" property="description" jdbcType="VARCHAR" />
        <!-- 提供商图标路径 -->
        <result column="icon" property="icon" jdbcType="VARCHAR" />
        <!-- 背景颜色 -->
        <result column="background" property="background" jdbcType="VARCHAR" />
        <!-- 排序权重 -->
        <result column="sort_order" property="sortOrder" jdbcType="INTEGER" />
        <!-- 支持的模型类型列表 -->
        <result column="supported_model_types" property="supportedModelTypes" jdbcType="VARCHAR" />
        <!-- 配置方法列表 -->
        <result column="configurate_methods" property="configurateMethods" jdbcType="VARCHAR" />
        <!-- 帮助信息 -->
        <result column="help_info" property="helpInfo" jdbcType="VARCHAR" />
        <!-- 提供商凭证配置Schema -->
        <result column="credential_schema" property="credentialSchema" jdbcType="VARCHAR" />
        <!-- 创建时间 -->
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <!-- 更新时间 -->
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <!-- 创建者 -->
        <result column="created_by" property="createdBy" jdbcType="VARCHAR" />
        <!-- 更新者 -->
        <result column="updated_by" property="updatedBy" jdbcType="VARCHAR" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, tenant_id, provider_code, plugin_id,
        custom_config, enabled, name, description, icon, background, sort_order,
        supported_model_types, configurate_methods, help_info, credential_schema,
        create_time, update_time, created_by, updated_by
    </sql>

    <!-- 根据ID查询模型提供商 -->
    <select id="selectById" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM model_provider
        WHERE id = #{id}
    </select>

    <!-- 根据租户ID和提供商代码查询配置 -->
    <select id="selectByTenantAndCode" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM model_provider
        WHERE tenant_id = #{tenantId} AND provider_code = #{providerCode}
    </select>

    <!-- 根据租户ID查询所有提供商配置 -->
    <select id="selectByTenantId" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM model_provider
        WHERE tenant_id = #{tenantId}
        ORDER BY create_time DESC
    </select>

    <!-- 根据提供商代码查询模型提供商 -->
    <select id="selectByProviderCode" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM model_provider
        WHERE tenant_id = #{tenantId} AND provider_code = #{providerCode}
    </select>

    <!-- 根据启用状态查询模型提供商 -->
    <select id="selectByEnabled" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM model_provider
        WHERE tenant_id = #{tenantId} AND enabled = #{enabled}
        ORDER BY create_time DESC
    </select>

    <!-- 分页查询模型提供商 -->
    <select id="selectList" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM model_provider
        <where>
            <if test="tenantId != null and tenantId != ''">
                AND tenant_id = #{tenantId}
            </if>
            <if test="params.providerCode != null and params.providerCode != ''">
                AND provider_code LIKE CONCAT('%', #{params.providerCode}, '%')
            </if>
            <if test="params.pluginId != null and params.pluginId != ''">
                AND plugin_id = #{params.pluginId}
            </if>
            <if test="params.enabled != null">
                AND enabled = #{params.enabled}
            </if>
        </where>
        ORDER BY create_time DESC
    </select>

    <!-- 计算符合条件的记录数 -->
    <select id="count" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM model_provider
        <where>
            <if test="tenantId != null and tenantId != ''">
                AND tenant_id = #{tenantId}
            </if>
            <if test="queryParam.providerCode != null and queryParam.providerCode != ''">
                AND provider_code LIKE CONCAT('%', #{queryParam.providerCode}, '%')
            </if>
            <if test="queryParam.pluginId != null and queryParam.pluginId != ''">
                AND plugin_id = #{queryParam.pluginId}
            </if>
            <if test="queryParam.enabled != null">
                AND enabled = #{queryParam.enabled}
            </if>
        </where>
    </select>

    <!-- 插入模型提供商 -->
    <insert id="insert" parameterType="com.yonchain.ai.tmpl.entity.ModelProviderEntity">
        INSERT INTO model_provider (
            id, tenant_id, provider_code, plugin_id,
            custom_config, enabled, name, description, icon, background, sort_order,
            supported_model_types, configurate_methods, help_info, credential_schema,
            create_time, update_time, created_by, updated_by
        )
        VALUES (
                   #{id}, #{tenantId}, #{providerCode}, #{pluginId},
                   #{customConfig}, #{enabled}, #{name}, #{description}, #{icon}, #{background}, #{sortOrder},
                   #{supportedModelTypes}, #{configurateMethods}, #{helpInfo}, #{credentialSchema},
                   #{createTime}, #{updateTime}, #{createdBy}, #{updatedBy}
               )
    </insert>

    <!-- 更新模型提供商 -->
    <update id="update" parameterType="com.yonchain.ai.tmpl.entity.ModelProviderEntity">
        UPDATE model_provider
        SET provider_code = #{providerCode},
            plugin_id = #{pluginId},
            custom_config = #{customConfig},
            enabled = #{enabled},
            name = #{name},
            description = #{description},
            icon = #{icon},
            background = #{background},
            sort_order = #{sortOrder},
            supported_model_types = #{supportedModelTypes},
            configurate_methods = #{configurateMethods},
            help_info = #{helpInfo},
            credential_schema = #{credentialSchema},
            update_time = #{updateTime},
            updated_by = #{updatedBy}
        WHERE id = #{id}
    </update>

    <!-- 根据ID删除模型提供商 -->
    <delete id="deleteById" parameterType="java.lang.String">
        DELETE FROM model_provider
        WHERE id = #{id}
    </delete>

    <!-- 批量删除模型提供商 -->
    <delete id="batchDelete">
        DELETE FROM model_provider
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <!-- 根据租户ID删除所有配置 -->
    <delete id="deleteByTenantId" parameterType="java.lang.String">
        DELETE FROM model_provider
        WHERE tenant_id = #{tenantId}
    </delete>

</mapper>