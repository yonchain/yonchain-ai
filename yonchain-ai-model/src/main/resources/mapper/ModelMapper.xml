<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yonchain.ai.tmpl.mapper.ModelMapper">

    <!-- 基础结果映射 -->
    <resultMap id="BaseResultMap" type="com.yonchain.ai.tmpl.entity.ModelEntity">
        <!-- 主键ID -->
        <id column="id" property="id" jdbcType="VARCHAR" />
        <!-- 租户ID -->
        <result column="tenant_id" property="tenantId" jdbcType="VARCHAR" />
        <!-- 模型代码，关联静态配置文件 -->
        <result column="model_code" property="modelCode" jdbcType="VARCHAR" />
        <!-- 提供商代码 -->
        <result column="provider_code" property="providerCode" jdbcType="VARCHAR" />
        <!-- 租户的模型个性化配置 -->
        <result column="model_config" property="modelConfig" jdbcType="VARCHAR" />
        <!-- 租户设置的模型默认参数 -->
        <result column="default_params" property="defaultParams" jdbcType="VARCHAR" />
        <!-- 租户是否启用该模型 -->
        <result column="enabled" property="enabled" jdbcType="BOOLEAN" />
        <!-- 租户自定义的排序权重 -->
        <result column="sort_order" property="sortOrder" jdbcType="INTEGER" />
        <!-- 创建时间 -->
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <!-- 更新时间 -->
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <!-- 创建者 -->
        <result column="created_by" property="createdBy" jdbcType="VARCHAR" />
        <!-- 更新者 -->
        <result column="updated_by" property="updatedBy" jdbcType="VARCHAR" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, tenant_id, model_code, provider_code, model_config, default_params,
        enabled, sort_order, create_time, update_time, created_by, updated_by
    </sql>

    <!-- 根据ID查询模型 -->
    <select id="selectById" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM model
        WHERE id = #{id}
    </select>

    <!-- 根据租户ID和模型代码查询配置 -->
    <select id="selectByTenantAndModelCode" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM model
        WHERE tenant_id = #{tenantId} AND model_code = #{modelCode}
    </select>

    <!-- 根据租户ID、提供商代码和模型代码查询配置 -->
    <select id="selectByTenantProviderAndModelCode" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM model
        WHERE tenant_id = #{tenantId} AND provider_code = #{providerCode} AND model_code = #{modelCode}
    </select>

    <!-- 根据租户ID和提供商代码查询模型列表 -->
    <select id="selectByTenantAndProviderCode" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM model
        WHERE tenant_id = #{tenantId} AND provider_code = #{providerCode}
        ORDER BY sort_order ASC, create_time DESC
    </select>

    <!-- 根据启用状态查询模型列表 -->
    <select id="selectByEnabled" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM model
        WHERE tenant_id = #{tenantId} AND enabled = #{enabled}
        ORDER BY sort_order ASC, create_time DESC
    </select>

    <!-- 根据租户ID查询模型列表 -->
    <select id="selectList" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM model
        <where>
            <if test="tenantId != null and tenantId != ''">
                AND tenant_id = #{tenantId}
            </if>
            <if test="params.modelCode != null and params.modelCode != ''">
                AND model_code LIKE CONCAT('%', #{params.modelCode}, '%')
            </if>
            <if test="params.providerCode != null and params.providerCode != ''">
                AND provider_code = #{params.providerCode}
            </if>
            <if test="params.enabled != null">
                AND enabled = #{params.enabled}
            </if>
        </where>
        ORDER BY sort_order ASC, create_time DESC
    </select>

    <!-- 插入模型 -->
    <insert id="insert" parameterType="com.yonchain.ai.tmpl.entity.ModelEntity">
        INSERT INTO model (
            id, tenant_id, model_code, provider_code, model_config, default_params,
            enabled, sort_order, create_time, update_time, created_by, updated_by
        )
        VALUES (
                   #{id}, #{tenantId}, #{modelCode}, #{providerCode}, #{modelConfig}, #{defaultParams},
                   #{enabled}, #{sortOrder}, #{createTime}, #{updateTime}, #{createdBy}, #{updatedBy}
               )
    </insert>

    <!-- 更新模型 -->
    <update id="update" parameterType="com.yonchain.ai.tmpl.entity.ModelEntity">
        UPDATE model
        SET model_code = #{modelCode},
            provider_code = #{providerCode},
            model_config = #{modelConfig},
            default_params = #{defaultParams},
            enabled = #{enabled},
            sort_order = #{sortOrder},
            update_time = #{updateTime},
            updated_by = #{updatedBy}
        WHERE id = #{id}
    </update>

    <!-- 根据ID删除模型 -->
    <delete id="deleteById" parameterType="java.lang.String">
        DELETE FROM model
        WHERE id = #{id}
    </delete>

    <!-- 根据租户ID删除所有模型配置 -->
    <delete id="deleteByTenantId" parameterType="java.lang.String">
        DELETE FROM model
        WHERE tenant_id = #{tenantId}
    </delete>

</mapper>