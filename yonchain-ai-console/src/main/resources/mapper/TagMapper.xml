<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yonchain.ai.console.tag.mapper.TagMapper">
    <!-- 基础结果映射 -->
    <resultMap id="BaseResultMap" type="com.yonchain.ai.console.tag.entity.TagEntity">
        <!-- 主键ID，使用UUID类型 -->
        <id column="id" property="id" jdbcType="OTHER" />
        <!-- 租户ID，可为空 -->
        <result column="tenant_id" property="tenantId" jdbcType="OTHER" />
        <!-- 标签类型，不可为空，最大长度16 -->
        <result column="type" property="type" jdbcType="VARCHAR" />
        <!-- 标签名称，不可为空，最大长度255 -->
        <result column="name" property="name" jdbcType="VARCHAR" />
        <!-- 创建人ID，不可为空 -->
        <result column="created_by" property="createdBy" jdbcType="OTHER" />
        <!-- 创建时间，不可为空，默认为当前时间戳 -->
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, tenant_id, type, name, created_by, created_at
    </sql>


    <!-- 根据ID查询标签 -->
    <select id="selectById" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM tag
        WHERE id = #{id}::uuid
    </select>

    <!-- 根据租户ID查询标签列表 -->
    <select id="selectList" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM tag
        WHERE tenant_id = #{tenantId}::uuid
        <if test="params.type != null and params.type != ''">
            AND type = #{params.type}
        </if>
    </select>

    <!-- 插入标签记录 -->
    <insert id="insert" parameterType="com.yonchain.ai.console.tag.entity.TagEntity">
        INSERT INTO tag (
            tenant_id, type, name, created_by
        )
        VALUES (
            #{tenantId}::uuid, #{type}, #{name}, #{createdBy}::uuid
        )
    </insert>

    <!-- 根据ID更新标签信息 -->
    <update id="updateById" parameterType="com.yonchain.ai.console.tag.entity.TagEntity">
        UPDATE tag
        SET tenant_id = #{tenantId}::uuid,
            type = #{type},
            name = #{name}
        WHERE id = #{id}::uuid
    </update>

    <!-- 根据ID删除标签 -->
    <delete id="deleteById">
        DELETE FROM tag
        WHERE id = #{id}::uuid
    </delete>

    <!-- 根据ID列表删除标签 -->
    <delete id="deleteByIds">
        DELETE FROM tag
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}::uuid
        </foreach>
    </delete>

</mapper>
