<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yonchain.ai.idm.mapper.RoleMapper">
    <!-- 基础结果映射 -->
    <resultMap id="BaseResultMap" type="com.yonchain.ai.idm.entity.RoleEntity">
        <!-- 主键ID，使用UUID类型 -->
        <id column="id" property="id" jdbcType="OTHER" />
        <!-- 角色名称 -->
        <result column="name" property="name" jdbcType="VARCHAR" />
        <!-- 角色代码 -->
        <result column="code" property="code" jdbcType="VARCHAR" />
        <!-- 角色描述 -->
        <result column="description" property="description" jdbcType="VARCHAR" />
        <!-- 角色状态，默认为normal -->
        <result column="status" property="status" jdbcType="VARCHAR" />
        <!-- 创建者ID -->
        <result column="created_by" property="createdBy" jdbcType="OTHER" />
        <!-- 创建时间 -->
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
        <!-- 更新者ID -->
        <result column="updated_by" property="updatedBy" jdbcType="OTHER" />
        <!-- 更新时间 -->
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
        <!-- 租户ID，可为空 -->
        <result column="tenant_id" property="tenantId" jdbcType="OTHER" />
        <!-- 角色类别，默认为1 -->
        <result column="category" property="category" jdbcType="VARCHAR" />
        <!-- 角色所属分组ID -->
        <result column="group_id" property="groupId" jdbcType="OTHER" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, name, code, description, status, created_by, created_at, updated_by, updated_at,tenant_id,category,group_id
    </sql>

    <!-- 根据ID查询角色 -->
    <select id="selectById" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM dify4j_role
        WHERE id = #{id}::uuid
    </select>

    <!-- 查询角色列表 -->
    <select id="selectList" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM dify4j_role
        <where>
            tenant_id = #{tenantId}::uuid
            <if test="params.name != null and params.name != ''">
                AND name LIKE CONCAT('%', #{params.name}, '%')
            </if>
            <if test="params.code != null and params.code != ''">
                AND code LIKE CONCAT('%', #{params.code}, '%')
            </if>
            <if test="params.status != null and params.status != ''">
                AND status = #{params.status}
            </if>
            <if test="params.groupId != null and params.groupId != ''">
                AND group_id = #{params.groupId}::uuid
            </if>
            <if test="params.category != null and params.category != ''">
                AND category = #{params.category}
            </if>
            <if test="params.roleIds != null and params.roleIds.size() > 0">
                AND id IN
                <foreach collection="params.roleIds" item="roleId" open="(" separator="," close=")">
                    #{roleId}::uuid
                </foreach>
            </if>
            <if test="params.name_eq != null and params.name_eq != ''">
                AND name = #{params.name_eq}
            </if>
            <if test="params.code_eq != null and params.code_eq != ''">
                AND code = #{params.code_eq}
            </if>
            <if test="params.code_ne != null and params.code_ne != ''">
                AND code != #{params.code_ne}
            </if>
        </where>
        ORDER BY created_at DESC
    </select>

    <!-- 根据条件查询单个角色 -->
    <select id="selectOne" resultMap="BaseResultMap">
        SELECT
            role_.*
        FROM
            dify4j_role role_,
            tenant_account_joins tenant_account
        <where>
            role_.code = tenant_account."role" AND
            tenant_account.tenant_id = role_.tenant_id AND
            tenant_account.tenant_id = #{tenantId}::uuid
            <if test="params.userId != null">
                AND  tenant_account.account_id = #{params.userId}
            </if>
        </where>
        LIMIT 1
    </select>


    <!-- 插入角色记录 -->
    <insert id="insert" parameterType="com.yonchain.ai.idm.entity.RoleEntity">
        INSERT INTO dify4j_role (
            id, name, code, status, created_by, created_at, updated_by, updated_at,tenant_id,description,category,group_id
        )
        VALUES (
            #{id}::uuid, #{name}, #{code}, #{status},
            #{createdBy}::uuid, #{createdAt}, #{updatedBy}::uuid,
            #{updatedAt}, #{tenantId}::uuid, #{description}, #{category}, #{groupId}::uuid
        )
    </insert>

    <!-- 根据ID更新角色信息 -->
    <update id="updateById" parameterType="com.yonchain.ai.idm.entity.RoleEntity">
        UPDATE dify4j_role
        SET name = #{name},
            code = #{code},
            status = #{status},
            description = #{description},
            group_id = #{groupId}::uuid,
            updated_by = #{updatedBy}::uuid,
            updated_at = CURRENT_TIMESTAMP
        WHERE id = #{id}::uuid
    </update>

    <!-- 根据ID删除角色 -->
    <delete id="deleteById">
        DELETE FROM dify4j_role
        WHERE id = #{id}::uuid
    </delete>

    <!-- 根据ID批量删除角色 -->
    <delete id="deleteByIds">
        DELETE FROM dify4j_role
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}::uuid
        </foreach>
    </delete>

    <!--查询用户角色列表-->
    <select id="selectUserRoles" resultMap="BaseResultMap">
        SELECT
            role_.*
        FROM
            dify4j_role role_,
            tenant_account_joins tenant_account
        <where>
            role_.code = tenant_account."role" AND
            tenant_account.tenant_id = role_.tenant_id AND
            tenant_account.tenant_id = #{tenantId}::uuid AND
            tenant_account.account_id = #{userId}::uuid
        </where>
    </select>

    <!-- 批量插入角色记录 -->
    <insert id="batchInsert" parameterType="java.util.List">
        INSERT INTO dify4j_role (
        id, name, code, status, created_by, created_at, updated_by, updated_at, tenant_id, description, category
        )
        VALUES
        <foreach collection="roles" item="role" separator=",">
            (
            #{role.id}::uuid, #{role.name}, #{role.code}, #{role.status},
            #{role.createdBy}::uuid, #{role.createdAt}, #{role.updatedBy}::uuid, #{role.updatedAt},
            #{role.tenantId}::uuid, #{role.description}, #{role.category}
            )
        </foreach>
    </insert>

</mapper>
